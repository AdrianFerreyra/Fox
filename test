#!/bin/sh

BUILD_DIR=`pwd`/build
LATEST_IOS_SDK_VERSION=`xcodebuild -showsdks | grep iphonesimulator | cut -d ' ' -f 4 | ruby -e 'puts STDIN.read.chomp.split("\n").last'`
LATEST_OSX_SDK_VERSION=`xcodebuild -showsdks | grep 'macosx' | cut -d ' ' -f 3 | ruby -e 'puts STDIN.read.chomp.split("\n").last'`
BUILD_IOS_SDK_VERSION=${FOX_BUILD_IOS_SDK_VERSION:-$LATEST_IOS_SDK_VERSION}
RUNTIME_IOS_SDK_VERSION=${FOX_RUNTIME_IOS_SDK_VERSION:-$LATEST_IOS_SDK_VERSION}
BUILD_OSX_SDK_VERSION=${FOX_BUILD_OSX_SDK_VERSION:-$LATEST_OSX_SDK_VERSION}

PROJECT_NAME='Fox.xcworkspace'
IOS_SCHEME=Fox-iOS
OSX_SCHEME=Fox-OSX
FOXLING_COMPILER_SCHEME='Foxling Compiler'
OSX_SPECS_APP_SCHEME=Fox-OSX-Specs

set -e

GREEN="\x1B[01;92m"
CLEAR="\x1B[0m"

function color_if_overridden {
    local actual=$1
    local env_var=$2
    if [ -z "$env_var" ]; then
        printf "$actual"
    else
        printf "$GREEN$actual$CLEAR"
    fi
}

function print_env {
    echo "=== Environment ==="
    echo " iOS:"
    echo "   Latest iOS SDK: $LATEST_IOS_SDK_VERSION"
    echo "   Building with iOS SDK: `color_if_overridden $BUILD_IOS_SDK_VERSION $FOX_BUILD_IOS_SDK_VERSION`"
    echo "   Running with iOS SDK: `color_if_overridden $RUNTIME_IOS_SDK_VERSION $FOX_RUNTIME_IOS_SDK_VERSION`"
    echo
    echo " Mac OS X:"
    echo "   Latest OS X SDK: $LATEST_OSX_SDK_VERSION"
    echo "   Building with OS X SDK: `color_if_overridden $BUILD_OSX_SDK_VERSION $FOX_BUILD_OSX_SDK_VERSION`"
    echo
    echo "======= END ======="
    echo
}

function run {
    echo "$GREEN==>$CLEAR $@"
    "$@"
}

function test_ios {
    run osascript -e 'tell app "iOS Simulator" to quit'
    run xcodebuild -workspace "$PROJECT_NAME"\
        -scheme "$IOS_SCHEME"\
        -configuration "Debug"\
        -sdk "iphonesimulator$BUILD_IOS_SDK_VERSION"\
        -destination "name=iPhone 5s,OS=$RUNTIME_IOS_SDK_VERSION" \
        build test \
        CODE_SIGNING_REQUIRED=NO \
        FOX_NUM_TESTS=$FOX_NUM_TEST \
        FOX_SEED=$FOX_SEED \
        FOX_MAX_SIZE=$FOX_MAX_SIZE
}

function test_osx {
    run xcodebuild -workspace "$PROJECT_NAME"\
        -scheme "$OSX_SCHEME"\
        -configuration "Debug"\
        -sdk "macosx$BUILD_OSX_SDK_VERSION"\
        build test
}

function podspec_lint() {
    pod spec lint Fox.podspec
}

function build_foxling() {
    pushd Foxling/LLVM
    ./unpack.sh
    popd
    run xcodebuild -workspace "$PROJECT_NAME"\
        -scheme "$FOXLING_COMPILER_SCHEME"\
        -configuration "Debug"\
        clean build
}

function test_foxling() {
    rm -rf build; true
    build_foxling
    run xcodebuild -workspace "$PROJECT_NAME"\
        -scheme "$OSX_SPECS_APP_SCHEME"\
        -configuration "Debug"\
        -sdk "macosx$BUILD_OSX_SDK_VERSION"\
        clean build \
        SYMROOT=`pwd`/build
    pushd build/Debug
    DYLD_FRAMEWORK_PATH=`pwd` ./$OSX_SPECS_APP_SCHEME
    popd
}

function test() {
    test_ios
    test_osx
    test_foxling
}

function clean {
    run rm -rf ~/Library/Developer/Xcode/DerivedData\; true
}

function help {
    echo "Usage: $0 COMMANDS"
    echo
    echo "COMMANDS:"
    echo " clean         - Cleans the derived data directory of Xcode. Assumes default location"
    echo " ios           - Runs the tests as an iOS device"
    echo " osx           - Runs the tests on Mac OS X 10.10 (Yosemite and newer only)"
    echo " foxling       - Runs OS X tests with Foxling Compiler."
    echo " build_foxling - Builds and installs the Foxling Compiler."
    echo " all           - Runs the OS X and iOS tests"
    echo " test          - Runs the OS X and iOS tests"
    echo " help          - Displays this help"
    echo
    exit 1
}

function main {
    print_env
    for arg in $@
    do
        case "$arg" in
            clean) clean ;;
            ios) test_ios ;;
            osx) test_osx ;;
            foxling) test_foxling ;;
            build_foxling) build_foxling ;;
            podspec) podspec_lint ;;
            test) test ;;
            all) test ;;
            help) help ;;
        esac
    done

    if [ $# -eq 0 ]; then
        test
    fi
}

main $@

